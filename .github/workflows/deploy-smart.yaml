name: (SMART) Unit Tests, Deploy, Integration Test
on:
  push:
    branches:
      - smart-develop
jobs:
  build-validate:
    name: Build and validate
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Install dependencies
        run: |
          cd auditLogMover
          yarn install
          cd ..
          yarn install
      - name: Build, lint, and run unit tests
        run: |
          cd auditLogMover
          yarn release
          cd ..
          yarn release
      - name: Build Hapi validator
        run: |
          cd javaHapiValidatorLambda
          mvn --batch-mode --update-snapshots --no-transfer-progress clean install
          cd ..
  pre-deployment-check:
    needs: build-validate
    runs-on: ubuntu-18.04
    timeout-minutes: 10
    steps:
      - name: 'Block Concurrent Deployments'
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  deploy:
    needs: pre-deployment-check
    name: Deploy to Dev - enableMultiTenancy=${{ matrix.enableMultiTenancy }}
    environment: FWoA Integ Test Env
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        include:
          - enableMultiTenancy: false
            region: us-east-2
            issuerEndpointSecretName: SMART_ISSUER_ENDPOINT
            oAuth2ApiEndpointSecretName: SMART_OAUTH2_API_ENDPOINT
            patientPickerEndpointSecretName: SMART_PATIENT_PICKER_ENDPOINT
            cdk_issuerEndpointSecretName: CDK_SMART_ISSUER_ENDPOINT
            cdk_oAuth2ApiEndpointSecretName: CDK_SMART_OAUTH2_API_ENDPOINT
            cdk_patientPickerEndpointSecretName: CDK_SMART_PATIENT_PICKER_ENDPOINT
          - enableMultiTenancy: true
            region: us-west-1
            issuerEndpointSecretName: MULTITENANCY_SMART_ISSUER_ENDPOINT
            oAuth2ApiEndpointSecretName: MULTITENANCY_SMART_OAUTH2_API_ENDPOINT
            patientPickerEndpointSecretName: MULTITENANCY_SMART_PATIENT_PICKER_ENDPOINT
            cdk_issuerEndpointSecretName: CDK_MT_SMART_ISSUER_ENDPOINT
            cdk_oAuth2ApiEndpointSecretName: CDK_MT_SMART_OAUTH2_API_ENDPOINT
            cdk_patientPickerEndpointSecretName: CDK_MT_SMART_PATIENT_PICKER_ENDPOINT
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Install npm dependencies
        run: yarn install
      - name: Download US Core IG
        # NOTE if updating the IG version. Please see update implementationGuides.test.ts test too.
        run: |
          mkdir -p implementationGuides
          curl http://hl7.org/fhir/us/core/STU3.1.1/package.tgz | tar xz -C implementationGuides
      - name: Compile IGs
        run: yarn run compile-igs
      - name: Setup allowList for Subscriptions integ tests
        run: cp integration-tests/infrastructure/allowList-integTests.ts src/subscriptions/allowList.ts
      - name: Install serverless
        run: npm install -g serverless@2.64.1
      - name: Deploy Hapi validator
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.SMART_AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SMART_AWS_SECRET_ACCESS_KEY }}
        run: |
          cd javaHapiValidatorLambda
          mvn --batch-mode --update-snapshots --no-transfer-progress clean install
          serverless deploy --stage dev --region ${{ matrix.region }} --conceal
          cd ..
      - name: Deploy FHIR Server and ddbToEs
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.SMART_AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SMART_AWS_SECRET_ACCESS_KEY }}
        run: |
          yarn install
          serverless deploy --stage dev --region ${{ matrix.region }} --issuerEndpoint ${{ secrets[matrix.issuerEndpointSecretName] }} --oAuth2ApiEndpoint ${{ secrets[matrix.oAuth2ApiEndpointSecretName] }} --patientPickerEndpoint ${{ secrets[matrix.patientPickerEndpointSecretName] }} --useHapiValidator true --enableSubscriptions true --enableMultiTenancy ${{ matrix.enableMultiTenancy }} --conceal
      - name: Deploy FWoA with CDK
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.CDK_SMART_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CDK_SMART_AWS_SECRET_ACCESS_KEY }}
        run: |
          yarn install
          yarn deploy -c issuerEndpoint=${{ secrets[matrix.cdk_issuerEndpointSecretName] }} -c oAuth2ApiEndpoint=${{ secrets[matrix.cdk_oAuth2ApiEndpointSecretName] }} -c patientPickerEndpoint=${{ secrets[matrix.cdk_patientPickerEndpointSecretName] }} -c enableSubscriptions=true -c useHapiValidator=true -c region=${{ matrix.region }} -c enableMultiTenancy=${{ matrix.enableMultiTenancy }} --all --require-approval=never
      - name: Deploy auditLogMover
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.SMART_AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SMART_AWS_SECRET_ACCESS_KEY }}
        run: |
          cd auditLogMover
          yarn install
          serverless deploy --stage dev --region ${{ matrix.region }} --conceal
  inferno-test:
    needs: deploy
    name: Run Inferno Tests - enableMultiTenancy=${{ matrix.enableMultiTenancy }}
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - enableMultiTenancy: false
            region: us-east-2
            serviceUrlSuffix: ''
            smartServiceURLSecretName: SMART_SERVICE_URL
            cdk_smartServiceURLSecretName: CDK_SMART_SERVICE_URL
          - enableMultiTenancy: true
            region: us-west-1
            serviceUrlSuffix: /tenant/tenant1
            smartServiceURLSecretName: MULTITENANCY_SMART_SERVICE_URL
            cdk_smartServiceURLSecretName: CDK_MULTITENANCY_SMART_SERVICE_URL
    steps:
      - uses: actions/checkout@v2
        with:
          repository: nguyen102/inferno
          ref: fhir-works
      - uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'
      - name: Install dependency
        run: |
          gem install bundler
          bundle install
      - name: Execute tests
        env:
          SERVICE_URL: ${{ secrets[matrix.smartServiceURLSecretName]}}${{ matrix.serviceUrlSuffix }}
          CLIENT_ID: ${{ secrets.SMART_AUTH_CLIENT_ID}}
          CLIENT_SECRET: ${{ secrets.SMART_AUTH_CLIENT_SECRET }}
          AUTH_ENDPOINT: ${{ secrets.SMART_AUTH_ENDPOINT }}
          TOKEN_ENDPOINT: ${{ secrets.SMART_TOKEN_ENDPOINT}}
          AUTH_USERNAME: ${{ secrets.SMART_AUTH_USERNAME}}
          AUTH_PASSWORD: ${{ secrets.SMART_AUTH_PASSWORD}}
        run: |
          cp fhir-works-example.json fhir-works.json
          sed -i -e "s#SERVER_ENDPOINT#$SERVICE_URL#g" fhir-works.json
          sed -i -e "s#CLIENT_ID#$CLIENT_ID#g" fhir-works.json
          sed -i -e "s#CLIENT_SECRET#$CLIENT_SECRET#g" fhir-works.json
          sed -i -e "s#AUTH_ENDPOINT#$AUTH_ENDPOINT#g" fhir-works.json
          sed -i -e "s#TOKEN_ENDPOINT#$TOKEN_ENDPOINT#g" fhir-works.json
          sed -i -e "s#AUTH_USERNAME#$AUTH_USERNAME#g" fhir-works.json
          sed -i -e "s#AUTH_PASSWORD#$AUTH_PASSWORD#g" fhir-works.json
          bundle exec rake db:create db:schema:load
          bundle exec rake inferno:execute_batch[fhir-works.json]
      - name: Execute tests on CDK
        env:
          SERVICE_URL: ${{ secrets[matrix.cdk_smartServiceURLSecretName]}}${{ matrix.serviceUrlSuffix }}
          CLIENT_ID: ${{ secrets.CDK_SMART_AUTH_CLIENT_ID}}
          CLIENT_SECRET: ${{ secrets.CDK_SMART_AUTH_CLIENT_SECRET }}
          AUTH_ENDPOINT: ${{ secrets.CDK_SMART_AUTH_ENDPOINT }}
          TOKEN_ENDPOINT: ${{ secrets.CDK_SMART_TOKEN_ENDPOINT}}
          AUTH_USERNAME: ${{ secrets.CDK_SMART_AUTH_USERNAME}}
          AUTH_PASSWORD: ${{ secrets.CDK_SMART_AUTH_PASSWORD}}
        run: |
          cp fhir-works-example.json fhir-works.json
          sed -i -e "s#SERVER_ENDPOINT#$SERVICE_URL#g" fhir-works.json
          sed -i -e "s#CLIENT_ID#$CLIENT_ID#g" fhir-works.json
          sed -i -e "s#CLIENT_SECRET#$CLIENT_SECRET#g" fhir-works.json
          sed -i -e "s#AUTH_ENDPOINT#$AUTH_ENDPOINT#g" fhir-works.json
          sed -i -e "s#TOKEN_ENDPOINT#$TOKEN_ENDPOINT#g" fhir-works.json
          sed -i -e "s#AUTH_USERNAME#$AUTH_USERNAME#g" fhir-works.json
          sed -i -e "s#AUTH_PASSWORD#$AUTH_PASSWORD#g" fhir-works.json
          sed -i -e "s/okta-signin-username/input28/g" fhir-works.json
          sed -i -e "s/okta-signin-password/input36/g" fhir-works.json
          sed -i -e "s/okta-signin-submit/button-primary/g" fhir-works.json
          sed -i -e "14 s/id/class/" fhir-works.json
          bundle exec rake db:create db:schema:load
          bundle exec rake inferno:execute_batch[fhir-works.json]
  custom-integration-tests:
    needs: inferno-test
    name: Run custom integration tests - enableMultiTenancy=${{ matrix.enableMultiTenancy }}
    environment: FWoA Integ Test Env
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        include:
          - enableMultiTenancy: false
            region: us-east-2
            smartOauth2ApiEndpointSecretName: SMART_OAUTH2_API_ENDPOINT
            smartAuthUsernameSecretName: SMART_AUTH_USERNAME
            smartAuthAdminUsernameSecretName: SMART_AUTH_ADMIN_USERNAME
            smartServiceURLSecretName: SMART_SERVICE_URL
            smartApiKeySecretName: SMART_API_KEY
            subscriptionsNotificationsTableSecretName: SMART_SUBSCRIPTIONS_NOTIFICATIONS_TABLE
            subscriptionsEndpointSecretName: SMART_SUBSCRIPTIONS_ENDPOINT
            subscriptionsApiKeySecretName: SMART_SUBSCRIPTIONS_API_KEY
            cdk_smartOauth2ApiEndpointSecretName: CDK_SMART_OAUTH2_API_ENDPOINT
            cdk_smartAuthUsernameSecretName: CDK_SMART_AUTH_USERNAME
            cdk_smartAuthAdminUsernameSecretName: CDK_SMART_AUTH_ADMIN_USERNAME
            cdk_smartServiceURLSecretName: CDK_SMART_SERVICE_URL
            cdk_smartApiKeySecretName: CDK_SMART_API_KEY
            cdk_subscriptionsNotificationsTableSecretName: CDK_SMART_SUBSCRIPTIONS_NOTIFICATIONS_TABLE
            cdk_subscriptionsEndpointSecretName: CDK_SMART_SUBSCRIPTIONS_ENDPOINT
            cdk_subscriptionsApiKeySecretName: CDK_SMART_SUBSCRIPTIONS_API_KEY
          - enableMultiTenancy: true
            region: us-west-1
            smartOauth2ApiEndpointSecretName: MULTITENANCY_SMART_OAUTH2_API_ENDPOINT
            smartAuthUsernameSecretName: MULTITENANCY_SMART_AUTH_USERNAME
            smartAuthAdminUsernameSecretName: MULTITENANCY_SMART_AUTH_ADMIN_USERNAME
            smartServiceURLSecretName: MULTITENANCY_SMART_SERVICE_URL
            smartApiKeySecretName: MULTITENANCY_SMART_API_KEY
            subscriptionsNotificationsTableSecretName: MULTITENANCY_SMART_SUBSCRIPTIONS_NOTIFICATIONS_TABLE
            subscriptionsEndpointSecretName: MULTITENANCY_SMART_SUBSCRIPTIONS_ENDPOINT
            subscriptionsApiKeySecretName: MULTITENANCY_SMART_SUBSCRIPTIONS_API_KEY
            cdk_smartOauth2ApiEndpointSecretName: CDK_MT_SMART_OAUTH2_API_ENDPOINT
            cdk_smartAuthUsernameSecretName: CDK_MT_SMART_AUTH_USERNAME
            cdk_smartAuthAdminUsernameSecretName: CDK_MT_SMART_AUTH_ADMIN_USERNAME
            cdk_smartServiceURLSecretName: CDK_MT_SMART_SERVICE_URL
            cdk_smartApiKeySecretName: CDK_MT_SMART_API_KEY
            cdk_subscriptionsNotificationsTableSecretName: CDK_MT_SMART_SUBSCRIPTIONS_NOTIFICATIONS_TABLE
            cdk_subscriptionsEndpointSecretName: CDK_MT_SMART_SUBSCRIPTIONS_ENDPOINT
            cdk_subscriptionsApiKeySecretName: CDK_MT_SMART_SUBSCRIPTIONS_API_KEY
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14
      - name: Install dependencies
        run: |
          yarn install
      - name: Execute tests
        env:
          SMART_OAUTH2_API_ENDPOINT: ${{ secrets[matrix.smartOauth2ApiEndpointSecretName] }}
          SMART_INTEGRATION_TEST_CLIENT_ID: ${{ secrets.SMART_INTEGRATION_TEST_CLIENT_ID}}
          SMART_INTEGRATION_TEST_CLIENT_PW: ${{ secrets.SMART_INTEGRATION_TEST_CLIENT_PW}}
          SMART_AUTH_USERNAME: ${{ secrets[matrix.smartAuthUsernameSecretName] }}
          SMART_AUTH_ADMIN_USERNAME: ${{ secrets[matrix.smartAuthAdminUsernameSecretName] }}
          SMART_AUTH_ADMIN_ANOTHER_TENANT_USERNAME: ${{ secrets.SMART_AUTH_ADMIN_ANOTHER_TENANT_USERNAME}}
          SMART_AUTH_PASSWORD: ${{ secrets.SMART_AUTH_PASSWORD}}
          SMART_SERVICE_URL: ${{ secrets[matrix.smartServiceURLSecretName] }}
          SMART_API_KEY: ${{ secrets[matrix.smartApiKeySecretName] }}
          MULTI_TENANCY_ENABLED: ${{ matrix.enableMultiTenancy }}
          SUBSCRIPTIONS_ENABLED: 'true'
          SUBSCRIPTIONS_NOTIFICATIONS_TABLE: ${{ secrets[matrix.subscriptionsNotificationsTableSecretName] }}
          SUBSCRIPTIONS_ENDPOINT: ${{ secrets[matrix.subscriptionsEndpointSecretName] }}
          SUBSCRIPTIONS_API_KEY: ${{ secrets[matrix.subscriptionsApiKeySecretName] }}
          AWS_ACCESS_KEY_ID: ${{ secrets.SMART_AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SMART_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ matrix.region }}
          API_AWS_REGION: ${{ matrix.region }}
        run: yarn int-test
      - name: Execute tests on CDK
        env:
          SMART_OAUTH2_API_ENDPOINT: ${{ secrets[matrix.cdk_smartOauth2ApiEndpointSecretName] }}
          SMART_INTEGRATION_TEST_CLIENT_ID: ${{ secrets.CDK_SMART_INTEGRATION_TEST_CLIENT_ID}}
          SMART_INTEGRATION_TEST_CLIENT_PW: ${{ secrets.CDK_SMART_INTEGRATION_TEST_CLIENT_PW}}
          SMART_AUTH_USERNAME: ${{ secrets[matrix.cdk_smartAuthUsernameSecretName] }}
          SMART_AUTH_ADMIN_USERNAME: ${{ secrets[matrix.cdk_smartAuthAdminUsernameSecretName] }}
          SMART_AUTH_ADMIN_ANOTHER_TENANT_USERNAME: ${{ secrets.CDK_SMART_AUTH_ADMIN_ANOTHER_TENANT_USERNAME}}
          SMART_AUTH_PASSWORD: ${{ secrets.CDK_SMART_AUTH_PASSWORD}}
          SMART_SERVICE_URL: ${{ secrets[matrix.cdk_smartServiceURLSecretName] }}
          SMART_API_KEY: ${{ secrets[matrix.cdk_smartApiKeySecretName] }}
          MULTI_TENANCY_ENABLED: ${{ matrix.enableMultiTenancy }}
          SUBSCRIPTIONS_ENABLED: 'true'
          SUBSCRIPTIONS_NOTIFICATIONS_TABLE: ${{ secrets[matrix.cdk_subscriptionsNotificationsTableSecretName] }}
          SUBSCRIPTIONS_ENDPOINT: ${{ secrets[matrix.cdk_subscriptionsEndpointSecretName] }}
          SUBSCRIPTIONS_API_KEY: ${{ secrets[matrix.cdk_subscriptionsApiKeySecretName] }}
          AWS_ACCESS_KEY_ID: ${{ secrets.CDK_SMART_AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CDK_SMART_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ matrix.region }}
          API_AWS_REGION: ${{ matrix.region }}
        run: yarn int-test
  merge-develop-to-mainline:
    needs: custom-integration-tests
    name: Merge smart-develop to smart-mainline
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{secrets.MERGE_TOKEN}}
          fetch-depth: 0
      # There's no way for github actions to push to a protected branch. This is a workaround
      # See https://github.community/t/how-to-push-to-protected-branches-in-a-github-action/16101/30
      - name: Temporarily disable branch protection
        uses: octokit/request-action@v2.x
        with:
          route: DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
          owner: awslabs
          repo: fhir-works-on-aws-deployment
          branch: smart-mainline
        env:
          GITHUB_TOKEN: ${{ secrets.MERGE_TOKEN }}
      - name: Merge to smart-mainline
        run: |
          git checkout smart-mainline
          echo
          echo "  Attempting to merge the 'smart-develop' branch ($(git log -1 --pretty=%H smart-develop))"
          echo "  into the 'smart-mainline' branch ($(git log -1 --pretty=%H smart-mainline))"
          echo
          git merge --ff-only --no-edit smart-develop
          git push origin smart-mainline
      - name: Enable branch protection
        uses: octokit/request-action@v2.x
        if: always() # Make sure to enable branch protection even if other steps fail
        with:
          route: POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
          owner: awslabs
          repo: fhir-works-on-aws-deployment
          branch: smart-mainline
        env:
          GITHUB_TOKEN: ${{ secrets.MERGE_TOKEN }}
