#
#  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#  SPDX-License-Identifier: Apache-2.0
#

service: fhir-service

custom:
  oldResourceTableName: 'resource-${self:custom.stage}'
  resourceTableName: 'resource-db-${self:custom.stage}'
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  oauthCallback: ${opt:oauthCallback, 'http://localhost'}
  oauthRedirect: ${opt:oauthRedirect, 'http://localhost'}
  config: ${file(serverless_config.json)}

provider:
  name: aws
  region: us-west-2
  stage: dev
  runtime: nodejs12.x
  memorySize: 512
  stackTags:
    FHIR_SERVICE: 'fhir-service-${self:custom.region}-${self:custom.stage}'
  environment:
    API_URL:
      !Join ['', ['https://', !Ref ApiGatewayRestApi, !Sub '.execute-api.${AWS::Region}.amazonaws.com/', !Ref Stage]]
    S3_KMS_KEY:
      Ref: S3KMSKey
    RESOURCE_TABLE: '${self:custom.resourceTableName}'
    FHIR_BINARY_BUCKET:
      Ref: FHIRBinaryBucket
    ELASTICSEARCH_DOMAIN_ENDPOINT: !Join ['', ['https://', !GetAtt ElasticSearchDomain.DomainEndpoint]]
    OAUTH2_DOMAIN_ENDPOINT:
      !Join ['', ['https://', !Ref UserPoolDomain, !Sub '.auth.${AWS::Region}.amazoncognito.com/oauth2']]
  apiKeys:
    - name: 'developer-key-${self:custom.stage}' # Full name must be known at package-time
      description: Key for developer to access the FHIR Api
  usagePlan:
    throttle:
      burstLimit: 100 # maximum API request rate limit over a time ranging from one to a few seconds
      rateLimit: 50 # average requests per second over an extended period of time
  iamRoleStatements:
    - Action:
        - 'kms:Describe*'
        - 'kms:Get*'
        - 'kms:List*'
        - 'kms:Encrypt'
        - 'kms:Decrypt'
        - 'kms:ReEncrypt*'
        - 'kms:GenerateDataKey'
        - 'kms:GenerateDataKeyWithoutPlaintext'
      Effect: Allow
      Resource:
        - !GetAtt S3KMSKey.Arn
        - !GetAtt DynamodbKMSKey.Arn
        - !GetAtt ElasticSearchKMSKey.Arn
    - Action:
        - 'dynamodb:Query'
        - 'dynamodb:Scan'
        - 'dynamodb:GetItem'
        - 'dynamodb:PutItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:BatchWriteItem'
      Effect: Allow
      Resource:
        - !GetAtt ResourceDynamoDBTableV2.Arn
    - Action:
        - 'es:*'
      Effect: Allow
      Resource:
        - !Join ['', [!GetAtt ElasticSearchDomain.Arn, '/*']]
    - Action:
        - 's3:*'
      Effect: Allow
      Resource:
        - !GetAtt FHIRBinaryBucket.Arn
        - !Join ['', [!GetAtt FHIRBinaryBucket.Arn, '/*']]
    - Action:
        - 'xray:PutTraceSegments'
        - 'xray:PutTelemetryRecords'
      Effect: Allow
      Resource:
        - '*'
  variableSyntax: "\\${((?!AWS)[ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)]+?)}" # Use this for allowing CloudFormation Pseudo-Parameters in your serverless.yml
  logs:
    restApi:
      executionLogging: true
      fullExecutionData: true
  tracing:
    apiGateway: true

functions:
  fhirServer:
    timeout: 40
    description: 'FHIR API Server'
    events:
      - http:
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            scopes: # must have both scopes
              - 'openid'
              - 'profile'
              - 'aws.cognito.signin.user.admin'
          method: ANY
          path: '/{proxy+}'
          private: true
    handler: src/index.default
    provisionedConcurrency: 5

  ddbToEs:
    timeout: 300
    runtime: nodejs12.x
    description: 'Write DDB changes from `resource` table to ElasticSearch service'
    role: DdbToEsLambdaRole
    handler: ddbToEsLambda/index.handler
    events:
      - stream:
          type: dynamodb
          arn:
            'Fn::GetAtt':
              - ResourceDynamoDBTableV2
              - StreamArn
          batchSize: 100
          maximumRetryAttempts: 3
          startingPosition: LATEST

resources:
  - Description: (SO0128) - Solution - Master Template - This template creates all the necessary resources to deploy FHIR Works on AWS; a framework to deploy a FHIR server on AWS.
  - Parameters:
      Stage:
        Type: String
        Default: ${self:custom.stage}
        Description: 'The deployment stage (e.g. dev, qa, prod). Default: dev'
      CognitoOAuthCallbackURL:
        Type: String
        Default: ${self:custom.oauthCallback}
        Description: 'Cognito OAuth callback URL used for User Pool. Default:  ${self:custom.oauthCallback}'
      CognitoOAuthRedirectURL:
        Type: String
        Default: ${self:custom.oauthRedirect}
        Description: 'Cognito OAuth redirect URL used for User Pool. Default:  ${self:custom.oauthRedirect}'
  - Conditions:
      isDev: !Equals [!Ref Stage, 'dev']
      isNotDev: !Not [Condition: isDev]
  - Resources:
      ResourceDynamoDBTableV2:
        Type: AWS::DynamoDB::Table
        DeletionPolicy: Retain
        UpdateReplacePolicy: Retain
        Properties:
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
            - AttributeName: vid
              AttributeType: N
          KeySchema:
            - AttributeName: id
              KeyType: HASH
            - AttributeName: vid
              KeyType: RANGE
          BillingMode: PAY_PER_REQUEST
          TableName: '${self:custom.resourceTableName}'
          StreamSpecification:
            StreamViewType: NEW_AND_OLD_IMAGES
          SSESpecification:
            KMSMasterKeyId: !Ref DynamodbKMSKey
            SSEEnabled: true
            SSEType: 'KMS'
          Tags: !If
            - isNotDev
            - - Key: 'backup' # You must also cfn deploy backup.yaml to enable back-ups
                Value: 'daily'
              - Key: 'service'
                Value: 'fhir'
            - Ref: AWS::NoValue
      ResourceDynamoDBTable: # Superseded by ResourceDynamoDBTableV2 & is unused;
        Type: AWS::DynamoDB::Table # Remaining in the template to give opportunity to move resources from old DB to New with "sort-key-migration.js" script
        DeletionPolicy: Retain
        UpdateReplacePolicy: Retain
        Properties:
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
            - AttributeName: vid
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH
            - AttributeName: vid
              KeyType: RANGE
          BillingMode: PAY_PER_REQUEST
          TableName: '${self:custom.oldResourceTableName}'
          SSESpecification:
            KMSMasterKeyId: !Ref DynamodbKMSKey
            SSEEnabled: true
            SSEType: 'KMS'
      ApiGatewayAuthorizer:
        Type: AWS::ApiGateway::Authorizer
        Properties:
          AuthorizerResultTtlInSeconds: 300
          IdentitySource: method.request.header.Authorization
          RestApiId:
            Ref: ApiGatewayRestApi
          Type: COGNITO_USER_POOLS
          Name: Authorizer
          ProviderARNs:
            - !Join [
                '',
                [!Sub 'arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/', !Ref UserPool],
              ]
      FHIRBinaryBucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        UpdateReplacePolicy: Retain
        Properties:
          LoggingConfiguration:
            DestinationBucketName: !Ref FHIRLogsBucket
            LogFilePrefix: 'binary-acl'
          VersioningConfiguration:
            Status: Enabled
          BucketEncryption:
            ServerSideEncryptionConfiguration:
              - ServerSideEncryptionByDefault:
                  SSEAlgorithm: aws:kms
                  KMSMasterKeyID: !Ref S3KMSKey
      FHIRLogsBucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        UpdateReplacePolicy: Retain
        Properties:
          AccessControl: LogDeliveryWrite
      FHIRBinaryBucketHttpsOnlyPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
          Bucket: !Ref FHIRBinaryBucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowSSLRequestsOnly
                Effect: Deny
                Principal: '*'
                Action:
                  - s3:*
                Resource:
                  - !GetAtt FHIRBinaryBucket.Arn
                  - !Join ['', [!GetAtt FHIRBinaryBucket.Arn, '/*']]
                Condition:
                  Bool:
                    'aws:SecureTransport': false
      DdbToEsLambdaRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Principal:
                  Service: 'lambda.amazonaws.com'
                Action: 'sts:AssumeRole'
          Policies:
            - PolicyName: 'DdbToEsLambdaPolicy'
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - logs:CreateLogStream
                      - logs:CreateLogGroup
                      - logs:PutLogEvents
                    Resource: !Sub 'arn:${AWS::Partition}:logs:*:*'
                  - Effect: Allow
                    Action:
                      - dynamodb:GetShardIterator
                      - dynamodb:DescribeStream
                      - dynamodb:ListStreams
                      - dynamodb:GetRecords
                    Resource:
                      - !GetAtt ResourceDynamoDBTableV2.StreamArn
                  - Effect: Allow
                    Action:
                      - xray:PutTraceSegments
                      - xray:PutTelemetryRecords
                    Resource:
                      - '*'
                  - Effect: Allow
                    Action:
                      - 'es:*'
                    Resource:
                      - !Join ['', [!GetAtt ElasticSearchDomain.Arn, '/*']]
            - PolicyName: 'KMSPolicy'
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - 'kms:Describe*'
                      - 'kms:Get*'
                      - 'kms:List*'
                      - 'kms:Encrypt'
                      - 'kms:Decrypt'
                      - 'kms:ReEncrypt*'
                      - 'kms:GenerateDataKey'
                      - 'kms:GenerateDataKeyWithoutPlaintext'
                    Resource:
                      - !GetAtt DynamodbKMSKey.Arn
                      - !GetAtt ElasticSearchKMSKey.Arn
  - ${file(cloudformation/alarms.yaml)}
  - ${file(cloudformation/kms.yaml)}
  - ${file(cloudformation/elasticsearch.yaml)}
  - ${file(cloudformation/cognito.yaml)}
  - Outputs:
      UserPoolId:
        Description: User pool id for the provisioning users.
        Value: !Ref UserPool
      UserPoolAppClientId:
        Description: App client id for the provisioning users.
        Value: !Ref UserPoolClient
      FHIRBinaryBucket:
        Description: S3 Bucket for storing Binary Objects
        Value: !Ref FHIRBinaryBucket
      ElasticSearchDomainEndpoint:
        Description: Endpoint of ElasticSearch instance
        Value: !Join ['', ['https://', !GetAtt ElasticSearchDomain.DomainEndpoint]]
      ElasticSearchDomainKibanaEndpoint:
        Condition: isDev
        Description: ElasticSearch Kibana endpoint
        Value: !Join ['', ['https://', !GetAtt ElasticSearchDomain.DomainEndpoint, '/_plugin/kibana']]
      ElasticSearchKibanaUserPoolId:
        Condition: isDev
        Description: User pool id for the provisioning ES Kibana users.
        Value: !Ref KibanaUserPool
      ElasticSearchKibanaUserPoolAppClientId:
        Condition: isDev
        Description: App client id for the provisioning ES Kibana users.
        Value: !Ref KibanaUserPoolClient
      CloudwatchExecutionLogGroup:
        Description: Cloudwatch Execution log group for storing request/responses for auditing purposes
        Value: !Join ['', ['API-Gateway-Execution-Logs_', !Ref ApiGatewayRestApi, '/', !Ref Stage]]
        Export:
          Name: !Join ['-', [CloudwatchExecutionLogGroup, !Ref Stage]]
      CloudwatchExecutionLogGroupArn:
        Description: Arn of Cloudwatch Execution log group for storing request/responses for auditing purposes
        Value:
          !Join [
            '',
            [
              !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:API-Gateway-Execution-Logs_',
              !Ref ApiGatewayRestApi,
              '/',
              !Ref Stage,
              ':log-stream:*',
            ],
          ]
        Export:
          Name: !Join ['-', [CloudwatchExecutionLogGroup, !Ref Stage, Arn]]

plugins:
  - serverless-plugin-typescript
  - serverless-offline
