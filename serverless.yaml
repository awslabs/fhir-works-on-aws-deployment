#
#  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#  SPDX-License-Identifier: Apache-2.0
#

service: fhir-service

custom:
  oldResourceTableName: 'resource-${self:custom.stage}'
  resourceTableName: 'resource-db-${self:custom.stage}'
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  oauthCallback: ${opt:oauthCallback, 'http://localhost'}
  oauthRedirect: ${opt:oauthRedirect, 'http://localhost'}
  config: ${file(serverless_config.json)}
  integrationTransformPath: '${self:service}_integration-transform_${self:custom.region}_${self:custom.stage}_url'

provider:
  name: aws
  region: us-west-2
  stage: dev
  runtime: nodejs12.x
  memorySize: 512
  stackTags:
    FHIR_SERVICE: 'fhir-service-${self:custom.region}-${self:custom.stage}'
  environment:
    API_URL:
      !Join [
        '',
        ['https://', !Ref ApiGatewayRestApi, '.execute-api.${self:custom.region}.amazonaws.com/${self:custom.stage}'],
      ]
    S3_KMS_KEY:
      Ref: S3KMSKey
    RESOURCE_TABLE: '${self:custom.resourceTableName}'
    OAUTH2_DOMAIN_ENDPOINT:
      !Join ['', ['https://', !Ref UserPoolDomain, '.auth.${self:custom.region}.amazoncognito.com/oauth2']]
    STAGE: '${self:custom.stage}'
    INTEGRATION_TRANSFORM_PATH:
      !Sub '${self:service}_integration-transform_${self:custom.region}_${self:custom.stage}_url'
  apiKeys:
    - name: 'developer-key-${self:custom.stage}'
      description: Key for developer to access the FHIR Api
  usagePlan:
    throttle:
      burstLimit: 100 # maximum API request rate limit over a time ranging from one to a few seconds
      rateLimit: 50 # average requests per second over an extended period of time
  iamRoleStatements:
    - Action:
        - 'kms:Describe*'
        - 'kms:Get*'
        - 'kms:List*'
        - 'kms:Encrypt'
        - 'kms:Decrypt'
        - 'kms:ReEncrypt*'
        - 'kms:GenerateDataKey'
        - 'kms:GenerateDataKeyWithoutPlaintext'
      Effect: Allow
      Resource:
        - !GetAtt S3KMSKey.Arn
        - !GetAtt DynamodbKMSKey.Arn
    - Action:
        - 'dynamodb:Query'
        - 'dynamodb:Scan'
        - 'dynamodb:GetItem'
        - 'dynamodb:PutItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:BatchWriteItem'
      Effect: Allow
      Resource:
        - !GetAtt ResourceDynamoDBTableV2.Arn
    - Action:
        - 'xray:PutTraceSegments'
        - 'xray:PutTelemetryRecords'
      Effect: Allow
      Resource:
        - '*'
    - Action:
        - 'ssm:GetParameter'
      Effect: Allow
      Resource:
        - !Sub 'arn:aws:ssm:${self:custom.region}:${AWS::AccountId}:parameter/${self:custom.integrationTransformPath}'
  variableSyntax: "\\${((?!AWS)[ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)]+?)}" # Use this for allowing CloudFormation Pseudo-Parameters in your serverless.yml
  logs:
    restApi:
      executionLogging: true
      fullExecutionData: true
  tracing:
    apiGateway: true

functions:
  fhirServer:
    timeout: 40
    description: 'FHIR API Server'
    events:
      - http:
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            scopes: # must have both scopes
              - 'openid'
              - 'profile'
              - 'aws.cognito.signin.user.admin'
          method: ANY
          path: /
          private: true
      - http:
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            scopes: # must have both scopes
              - 'openid'
              - 'profile'
              - 'aws.cognito.signin.user.admin'
          method: ANY
          path: '{proxy+}'
          private: true
    handler: src/index.default
#    provisionedConcurrency: 5

resources:
  - Conditions:
      isDev: !Equals ['${self:custom.stage}', 'dev']
      isNotDev: !Not [Condition: isDev]
  - Resources:
      ResourceDynamoDBTableV2:
        Type: AWS::DynamoDB::Table
        DeletionPolicy: Retain
        Properties:
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
            - AttributeName: vid
              AttributeType: N
          KeySchema:
            - AttributeName: id
              KeyType: HASH
            - AttributeName: vid
              KeyType: RANGE
          BillingMode: PAY_PER_REQUEST
          TableName: '${self:custom.resourceTableName}'
          StreamSpecification:
            StreamViewType: NEW_AND_OLD_IMAGES
          SSESpecification:
            KMSMasterKeyId: !Ref DynamodbKMSKey
            SSEEnabled: true
            SSEType: 'KMS'
          Tags: !If
            - isNotDev
            - - Key: 'backup' # You must also cfn deploy backup.yaml to enable back-ups
                Value: 'daily'
              - Key: 'service'
                Value: 'fhir'
            - Ref: AWS::NoValue
      ResourceDynamoDBTable: # Superseded by ResourceDynamoDBTableV2 & is unused;
        Type: AWS::DynamoDB::Table # Remaining in the template to give opportunity to move resources from old DB to New with "sort-key-migration.js" script
        DeletionPolicy: Retain
        Properties:
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
            - AttributeName: vid
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH
            - AttributeName: vid
              KeyType: RANGE
          BillingMode: PAY_PER_REQUEST
          TableName: '${self:custom.oldResourceTableName}'
          SSESpecification:
            KMSMasterKeyId: !Ref DynamodbKMSKey
            SSEEnabled: true
            SSEType: 'KMS'
      ApiGatewayAuthorizer:
        DependsOn:
          - ApiGatewayRestApi
        Type: AWS::ApiGateway::Authorizer
        Properties:
          AuthorizerResultTtlInSeconds: 300
          IdentitySource: method.request.header.Authorization
          RestApiId:
            Ref: ApiGatewayRestApi
          Type: COGNITO_USER_POOLS
          Name: Authorizer
          ProviderARNs:
            - !Join ['', [!Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/', !Ref UserPool]]
      FHIRLogsBucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        Properties:
          AccessControl: LogDeliveryWrite
  - ${file(cloudformation/alarms.yaml)}
  - ${file(cloudformation/kms.yaml)}
  - ${file(cloudformation/cognito.yaml)}
  - Outputs:
      UserPoolId:
        Description: User pool id for the provisioning users.
        Value: !Ref UserPool
      UserPoolAppClientId:
        Description: App client id for the provisioning users.
        Value: !Ref UserPoolClient
      CloudwatchExecutionLogGroup:
        Description: Cloudwatch Execution log group for storing request/responses for auditing purposes
        Value: !Join ['', ['API-Gateway-Execution-Logs_', !Ref ApiGatewayRestApi, '/', '${self:custom.stage}']]
        Export:
          Name: CloudwatchExecutionLogGroup-${self:custom.stage}
      CloudwatchExecutionLogGroupArn:
        Description: Arn of Cloudwatch Execution log group for storing request/responses for auditing purposes
        Value:
          !Join [
            '',
            [
              !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:API-Gateway-Execution-Logs_',
              !Ref ApiGatewayRestApi,
              '/',
              '${self:custom.stage}',
              ':log-stream:*',
            ],
          ]
        Export:
          Name: CloudwatchExecutionLogGroup-${self:custom.stage}-Arn
      FhirServiceLambdaRoleArn:
        Value: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${self:service}-${self:custom.stage}-${self:custom.region}-lambdaRole'

plugins:
  - serverless-plugin-typescript
  - serverless-offline
