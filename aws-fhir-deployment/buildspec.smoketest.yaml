version: 0.2
phases:
  install:
    runtime-versions:
      nodejs: 12
  post_build:
    commands:
      - echo "Smoke tests"
      # - temp_role=$(aws sts assume-role --role-arn "$ROLE_ARN" --role-session-name "SmokeTest-$STACK_NAME" --query 'Credentials' --output text)
      # - export AWS_ACCESS_KEY_ID=$(echo $temp_role | awk '{print $1}' | xargs)
      # - export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | awk '{print $3}' | xargs)
      # - export AWS_SESSION_TOKEN=$(echo $temp_role | awk '{print $4}' | xargs)
      - API_URL=$(aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query "Stacks[*].Outputs[?OutputKey=='ServiceEndpoint'].OutputValue" --output text)
      - echo $API_URL
      - RESP_MESSAGE=$(curl -XGET ${API_URL}/Patient/notreal|python -c "import sys, json; print(json.load(sys.stdin)['message'])")
      # - RESP_ERROR=$(curl -XGET ${API_URL}/Patient/notreal|python -c "import sys, json; print(json.load(sys.stdin)['issue']['severity'])")
      # - RESP_DIAG=$(curl -XGET ${API_URL}/Patient/notreal|python -c "import sys, json; print(json.load(sys.stdin)['issue']['diagnostics'])")
      # - if [ "$RESP_ERROR" = "error" ] && [ "$RESP_DIAG" = "Resource Patient/notreal is not known" ]; then echo smoke test SUCCESS; else echo smoke test FAILED; exit 10; fi
      - if [ "$RESP_MESSAGE" = "Unauthorized" ]; then echo smoke test SUCCESS; else echo smoke test FAILED; exit 10; fi
